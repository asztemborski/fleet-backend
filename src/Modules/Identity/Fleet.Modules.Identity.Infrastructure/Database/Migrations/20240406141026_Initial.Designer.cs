
// <auto-generated />
using System;
using Fleet.Modules.Identity.Infrastructure.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Fleet.Modules.Identity.Infrastructure.Database.Migrations
{
    [DbContext(typeof(IdentityContext))]
    [Migration("20240406141026_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("identity")
                .HasAnnotation("ProductVersion", "8.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Fleet.Modules.Identity.Domain.Entities.IdentityUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Users", "identity");
                });

            modelBuilder.Entity("Fleet.Modules.Identity.Domain.Entities.RefreshToken", b =>
                {
                    b.Property<string>("Token")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("ExpiresAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("IdentityUserId")
                        .HasColumnType("uuid");

                    b.HasKey("Token");

                    b.HasIndex("IdentityUserId");

                    b.ToTable("RefreshTokens", "identity");
                });

            modelBuilder.Entity("Fleet.Modules.Identity.Domain.Entities.IdentityUser", b =>
                {
                    b.OwnsOne("Fleet.Modules.Identity.Domain.Entities.UserEmail", "Email", b1 =>
                        {
                            b1.Property<Guid>("IdentityUserId")
                                .HasColumnType("uuid");

                            b1.Property<bool>("IsConfirmed")
                                .HasColumnType("boolean")
                                .HasColumnName("EmailConfirmed");

                            b1.HasKey("IdentityUserId");

                            b1.ToTable("Users", "identity");

                            b1.WithOwner()
                                .HasForeignKey("IdentityUserId");

                            b1.OwnsOne("Fleet.Modules.Identity.Domain.ValueObjects.Email", "Address", b2 =>
                                {
                                    b2.Property<Guid>("UserEmailIdentityUserId")
                                        .HasColumnType("uuid");

                                    b2.Property<string>("Value")
                                        .IsRequired()
                                        .HasColumnType("text")
                                        .HasColumnName("EmailAddress");

                                    b2.HasKey("UserEmailIdentityUserId");

                                    b2.ToTable("Users", "identity");

                                    b2.WithOwner()
                                        .HasForeignKey("UserEmailIdentityUserId");
                                });

                            b1.Navigation("Address")
                                .IsRequired();
                        });

                    b.OwnsOne("Fleet.Modules.Identity.Domain.ValueObjects.Username", "Username", b1 =>
                        {
                            b1.Property<Guid>("IdentityUserId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("Username");

                            b1.HasKey("IdentityUserId");

                            b1.ToTable("Users", "identity");

                            b1.WithOwner()
                                .HasForeignKey("IdentityUserId");
                        });

                    b.Navigation("Email")
                        .IsRequired();

                    b.Navigation("Username")
                        .IsRequired();
                });

            modelBuilder.Entity("Fleet.Modules.Identity.Domain.Entities.RefreshToken", b =>
                {
                    b.HasOne("Fleet.Modules.Identity.Domain.Entities.IdentityUser", null)
                        .WithMany("RefreshTokens")
                        .HasForeignKey("IdentityUserId");
                });

            modelBuilder.Entity("Fleet.Modules.Identity.Domain.Entities.IdentityUser", b =>
                {
                    b.Navigation("RefreshTokens");
                });
#pragma warning restore 612, 618
        }
    }
}
